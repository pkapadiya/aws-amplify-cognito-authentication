import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.dynamicframe import DynamicFrame
from pyspark.sql.functions import udf,translate
from pyspark.sql.types import StringType,IntegerType
from awsglue.job import Job
import re

args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
# data_load_condition="(year=='2019' and month=='01' and day=='02')"
data_load_condition="(year=='2019' and month=='08')"

get_clean_number = udf(lambda x: (re.sub(r'(\d*#)?([0+]*)?(\d*)', r'\g<3>',x)), StringType())
get_calling_number = udf(lambda x: (re.sub(r'^(\d*#)?([0+]*)?(973)?(\d*)', r'\g<4>',x)), StringType())
get_called_number = udf(lambda x: (re.sub(r'^(\d*#)?([0+]*)?(973)?(\d*)', r'\g<4>',x)), StringType())
# get_start_date_year=udf(lambda x: (x.split("-")[0]), StringType())
# get_start_date_month=udf(lambda x: (x.split("-")[1]), StringType())
# get_start_date_day=udf(lambda x: ((x.split("-")[2]).split()[0]), StringType())
get_partition_key=udf(lambda x: (x.split()[0].replace("-","")), StringType())
# replace_special_char=udf(lambda x: (str(x).replace('"',"").replace(",","")), StringType())

cdr_dynamic_frame = glueContext.create_dynamic_frame.from_catalog(database = "pkcdrtest", table_name = "raw", push_down_predicate = data_load_condition)

df = cdr_dynamic_frame.toDF()
# df = df.select(*[replace_special_char(column).alias(column) for column in df.columns])
# print("Pankaj::Count Before Remove:{}".format(df.show()))
# df=df.select(*[translate(column,'"',"").alias(column) for column in df.columns])
# df.show()

# df = df.withColumn("clean_number", get_clean_number(df["called_party_after_src_calling_plan"]))\
# .withColumn("year", get_start_date_year(df["start_time"]))\
# .withColumn("month", get_start_date_month(df["start_time"]))\
# .withColumn("day", get_start_date_day(df["start_time"]))\
# .withColumn("partition_key", get_partition_key(df["start_time"]))\
# .dropDuplicates()

df = df.drop("year").drop("month").drop("day")\
    .withColumn("clean_number", get_clean_number(df["called_party_after_src_calling_plan"]))\
    .withColumn("calling_number", get_calling_number(df["ani"]))\
    .withColumn("called_number", get_called_number(df["called_party_after_src_calling_plan"]))\
    .withColumn("partition_key", get_partition_key(df["start_time"]))\
    .dropDuplicates()

datasource0= DynamicFrame.fromDF(df, glueContext, "datasource0")

applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("start_time", "string", "start_time", "timestamp"), ("start_time_int", "long", "start_time_int", "long"), ("call_duration", "string", "call_duration", "string"), ("originator_ip", "string", "originator_ip", "string"), ("call_source_port", "long", "call_source_port", "long"), ("terminator_ip", "string", "terminator_ip", "string"), ("unused_column_7", "string", "unused_column_7", "string"), ("call_source_custid", "string", "call_source_custid", "string"), ("called_party_on_dest", "string", "called_party_on_dest", "string"), ("called_party_from_src", "string", "called_party_from_src", "string"), ("call_type", "string", "call_type", "string"), ("unused_column_12", "string", "unused_column_12", "string"), ("disconnect_error_type", "string", "disconnect_error_type", "string"), ("call_error_int", "long", "call_error_int", "long"), ("call_error_str", "string", "call_error_str", "string"), ("unused_column_16", "string", "unused_column_16", "string"), ("unused_column_17", "string", "unused_column_17", "string"), ("ani", "string", "ani", "string"), ("mediatype", "string", "mediatype", "string"), ("data_volume_tx_src", "long", "data_volume_tx_src", "long"), ("data_volume_tx_dst", "string", "data_volume_tx_dst", "string"), ("cdr_seq_no", "long", "cdr_seq_no", "long"), ("transcoder_id", "long", "transcoder_id", "long"), ("callid", "string", "callid", "string"), ("call_hold_time", "string", "call_hold_time", "string"), ("call_source_regid", "string", "call_source_regid", "string"), ("call_source_uport", "long", "call_source_uport", "long"), ("call_dest_regid", "string", "call_dest_regid", "string"), ("call_dest_uport", "long", "call_dest_uport", "long"), ("isdn_cause_code", "long", "isdn_cause_code", "long"), ("called_party_after_src_calling_plan", "string", "called_party_after_src_calling_plan", "string"), ("call_error_dest_num", "long", "call_error_dest_num", "long"), ("call_error_dest_str", "string", "call_error_dest_str", "string"), ("call_error_event_str", "string", "call_error_event_str", "string"), ("new_ani", "string", "new_ani", "string"), ("call_duration_int", "long", "call_duration_int", "long"), ("incoming_leg_callid", "string", "incoming_leg_callid", "string"), ("protocol", "string", "protocol", "string"), ("cdr_type", "string", "cdr_type", "string"), ("hunting_attempts", "long", "hunting_attempts", "long"), ("caller_trunk_group", "string", "caller_trunk_group", "string"), ("call_pdd", "long", "call_pdd", "long"), ("h323_dest_ras_error", "long", "h323_dest_ras_error", "long"), ("h323_dest_h225_error", "long", "h323_dest_h225_error", "long"), ("sip_dest_respcode", "long", "sip_dest_respcode", "long"), ("dest_trunk_group", "string", "dest_trunk_group", "string"), ("call_duration_fractional", "double", "call_duration_fractional", "double"), ("timezone", "string", "timezone", "string"), ("msw_name", "string", "msw_name", "string"), ("called_party_after_transit_route", "string", "called_party_after_transit_route", "string"), ("called_party_on_dest_num_type", "long", "called_party_on_dest_num_type", "long"), ("called_party_from_src_num_type", "long", "called_party_from_src_num_type", "long"), ("call_source_realm_name", "string", "call_source_realm_name", "string"), ("call_dest_realm_name", "string", "call_dest_realm_name", "string"), ("call_dest_crname", "string", "call_dest_crname", "string"), ("call_dest_custid", "string", "call_dest_custid", "string"), ("call_zone_data", "string", "call_zone_data", "string"), ("calling_party_on_dest_num_type", "long", "calling_party_on_dest_num_type", "long"), ("calling_party_from_src_num_type", "long", "calling_party_from_src_num_type", "long"), ("original_isdn_cause_code", "long", "original_isdn_cause_code", "long"), ("packets_received_on_src_leg", "long", "packets_received_on_src_leg", "long"), ("packets_lost_on_src_leg", "long", "packets_lost_on_src_leg", "long"), ("packets_discarded_on_src_leg", "long", "packets_discarded_on_src_leg", "long"), ("pdv_on_src_leg", "long", "pdv_on_src_leg", "long"), ("codec_on_src_leg", "string", "codec_on_src_leg", "string"), ("latency_on_src_leg", "long", "latency_on_src_leg", "long"), ("rfactor_on_src_leg", "long", "rfactor_on_src_leg", "long"), ("packets_received_on_dest_leg", "long", "packets_received_on_dest_leg", "long"), ("packets_lost_on_dest_leg", "long", "packets_lost_on_dest_leg", "long"), ("packets_discarded_on_dest_leg", "long", "packets_discarded_on_dest_leg", "long"), ("pdv_on_dest_leg", "long", "pdv_on_dest_leg", "long"), ("codec_on_dest_leg", "string", "codec_on_dest_leg", "string"), ("latency_on_dest_leg", "long", "latency_on_dest_leg", "long"), ("rfactor_on_dest_leg", "long", "rfactor_on_dest_leg", "long"), ("sip_src_respcode", "long", "sip_src_respcode", "long"), ("peer_protocol", "string", "peer_protocol", "string"), ("src_private_ip", "string", "src_private_ip", "string"), ("dest_private_ip", "string", "dest_private_ip", "string"), ("src_igrp_name", "string", "src_igrp_name", "string"), ("dest_igrp_name", "string", "dest_igrp_name", "string"), ("diversion_info", "string", "diversion_info", "string"), ("custom_contact_tag", "string", "custom_contact_tag", "string"), ("e911_call", "string", "e911_call", "string"), ("reserved_84", "string", "reserved_84", "string"), ("reserved_85", "string", "reserved_85", "string"), ("call_release_source", "string", "call_release_source", "string"), ("hunt_attempts_including_lcf_tries", "long", "hunt_attempts_including_lcf_tries", "long"), ("call_gapping_error", "long", "call_gapping_error", "long"), ("error_code_in_reason_header", "long", "error_code_in_reason_header", "long"), ("ocl_object_type", "string", "ocl_object_type", "string"), ("ocl_object_id_dtn_regid_realmname", "string", "ocl_object_id_dtn_regid_realmname", "string"), ("ocl_object_id_dtnrealm_uport", "string", "ocl_object_id_dtnrealm_uport", "string"), ("ocl_policy_name", "string", "ocl_policy_name", "string"), ("src_private_port", "long", "src_private_port", "long"), ("dest_private_port", "long", "dest_private_port", "long"), ("src_realm_media_ip", "string", "src_realm_media_ip", "string"), ("src_realm_media_port", "long", "src_realm_media_port", "long"), ("dest_realm_media_ip", "string", "dest_realm_media_ip", "string"), ("dest_realm_media_port", "long", "dest_realm_media_port", "long"), ("src_trunk_context", "string", "src_trunk_context", "string"), ("dst_trunk_context", "string", "dst_trunk_context", "string"), ("leg1_pcv", "string", "leg1_pcv", "string"), ("leg2_pcv", "string", "leg2_pcv", "string"), ("leg1_pani", "string", "leg1_pani", "string"), ("leg2_pani", "string", "leg2_pani", "string"), ("call_connect_time_ms", "string", "call_connect_time_ms", "timestamp"), ("call_end_time_ms", "string", "call_end_time_ms", "timestamp"), ("routing_number", "string", "routing_number", "string"), ("no_of_m_lines", "long", "no_of_m_lines", "long"), ("from_uri_user_part", "string", "from_uri_user_part", "string"), ("new_from_uri_user_part", "string", "new_from_uri_user_part", "string"), ("paid_uri_user_part", "string", "paid_uri_user_part", "string"), ("new_paid_uri_user_part", "string", "new_paid_uri_user_part", "string"), ("privacy_method_ingress", "string", "privacy_method_ingress", "string"), ("request_uri_user_part", "string", "request_uri_user_part", "string"), ("new_request_uri_user_part", "string", "new_request_uri_user_part", "string"), ("local_refer_status", "string", "local_refer_status", "string"), ("sip_dest_respreason", "string", "sip_dest_respreason", "string"), ("sip_src_respreason", "string", "sip_src_respreason", "string"), ("charge_number", "string", "charge_number", "string"), ("charge_number_noa", "long", "charge_number_noa", "long"), ("charge_number_npi", "long", "charge_number_npi", "long"), ("segment_start_time_ms", "string", "segment_start_time_ms", "timestamp"), ("segment_duration_fractional", "double", "segment_duration_fractional", "double"), ("leg1_loss_rate", "long", "leg1_loss_rate", "long"), ("leg1_discard_rate", "long", "leg1_discard_rate", "long"), ("leg1_burst_density", "long", "leg1_burst_density", "long"), ("leg1_gap_density", "long", "leg1_gap_density", "long"), ("leg1_burst_duration", "long", "leg1_burst_duration", "long"), ("leg1_gap_duration", "long", "leg1_gap_duration", "long"), ("leg1_round_trip_delay", "long", "leg1_round_trip_delay", "long"), ("leg1_es_delay", "long", "leg1_es_delay", "long"), ("leg1_gmin", "long", "leg1_gmin", "long"), ("leg1_jb_adaptive", "long", "leg1_jb_adaptive", "long"), ("leg1_jb_rate", "long", "leg1_jb_rate", "long"), ("leg1_rfactor", "long", "leg1_rfactor", "long"), ("leg1_mcq", "long", "leg1_mcq", "long"), ("leg1_jb_nominal", "long", "leg1_jb_nominal", "long"), ("leg1_jb_max_delay", "long", "leg1_jb_max_delay", "long"), ("leg1_jb_abs_max_delay", "long", "leg1_jb_abs_max_delay", "long"), ("leg2_loss_rate", "long", "leg2_loss_rate", "long"), ("leg2_discard_rate", "long", "leg2_discard_rate", "long"), ("leg2_burst_density", "long", "leg2_burst_density", "long"), ("leg2_gap_density", "long", "leg2_gap_density", "long"), ("leg2_burst_duration", "long", "leg2_burst_duration", "long"), ("leg2_gap_duration", "long", "leg2_gap_duration", "long"), ("leg2_round_trip_delay", "long", "leg2_round_trip_delay", "long"), ("leg2_es_delay", "long", "leg2_es_delay", "long"), ("leg2_gmin", "long", "leg2_gmin", "long"), ("leg2_jb_adaptive", "long", "leg2_jb_adaptive", "long"), ("leg2_jb_rate", "long", "leg2_jb_rate", "long"), ("leg2_rfactor", "long", "leg2_rfactor", "long"), ("leg2_mcq", "long", "leg2_mcq", "long"), ("leg2_jb_nominal", "long", "leg2_jb_nominal", "long"), ("leg2_jb_max_delay", "long", "leg2_jb_max_delay", "long"), ("leg2_jb_abs_max_delay", "long", "leg2_jb_abs_max_delay", "long"), ("unused_column_157", "string", "unused_column_157", "string"), ("unused_column_158", "string", "unused_column_158", "string"), ("src_cipher_suite", "string", "src_cipher_suite", "string"), ("dest_cipher_suite", "string", "dest_cipher_suite", "string"), ("src_packet_outside_replay_window", "long", "src_packet_outside_replay_window", "long"), ("src_packet_auth_failure", "long", "src_packet_auth_failure", "long"), ("src_packet_cipher_failure", "long", "src_packet_cipher_failure", "long"), ("dest_packet_outside_replay_window", "long", "dest_packet_outside_replay_window", "long"), ("dest_packet_auth_failure", "long", "dest_packet_auth_failure", "long"), ("dest_packet_cipher_failure", "long", "dest_packet_cipher_failure", "long"), ("fmm_call_leg_info1", "string", "fmm_call_leg_info1", "string"), ("fmm_call_leg_info2", "string", "fmm_call_leg_info2", "string"), ("fmm_call_leg_info3", "string", "fmm_call_leg_info3", "string"), ("fmm_call_leg_info4", "string", "fmm_call_leg_info4", "string"), ("fmm_call_leg_info5", "string", "fmm_call_leg_info5", "string"), ("fmm_call_info1", "string", "fmm_call_info1", "string"), ("fmm_call_info2", "string", "fmm_call_info2", "string"), ("fmm_call_info3", "string", "fmm_call_info3", "string"), ("fmm_call_info4", "string", "fmm_call_info4", "string"), ("fmm_call_info5", "string", "fmm_call_info5", "string"), ("embedded_dsp_insertion_reason", "string", "embedded_dsp_insertion_reason", "string"), ("outgoing_to_uri", "string", "outgoing_to_uri", "string"), ("incoming_request_uri", "string", "incoming_request_uri", "string"), ("incoming_rsa_ip_address", "string", "incoming_rsa_ip_address", "string"), ("sbc_iserver_version", "string", "sbc_iserver_version", "string"), ("outgoing_request_uri", "string", "outgoing_request_uri", "string"), ("outgoing_from_uri", "string", "outgoing_from_uri", "string"), ("privacy_ingress_requested", "string", "privacy_ingress_requested", "string"), ("privacy_method_egress", "string", "privacy_method_egress", "string"), ("privacy_egress_requested", "string", "privacy_egress_requested", "string"), ("src_policed_packets", "string", "src_policed_packets", "string"), ("dest_policed_packets", "string", "dest_policed_packets", "string"), ("full_paid_hdr", "string", "full_paid_hdr", "string"), ("source_ptime", "long", "source_ptime", "long"), ("destination_ptime", "long", "destination_ptime", "long"), ("fmm_call_invoked_profiles", "string", "fmm_call_invoked_profiles", "string"), ("unused_column_193", "string", "unused_column_193", "string"), ("unused_column_194", "string", "unused_column_194", "string"), ("unused_column_195", "string", "unused_column_195", "string"), ("unused_column_196", "string", "unused_column_196", "string"), ("unused_column_197", "string", "unused_column_197", "string"), ("unused_column_198", "string", "unused_column_198", "string"), ("reinvite_reject_count", "string", "reinvite_reject_count", "string"), ("organization_hdr", "string", "organization_hdr", "string"), ("sdp_media_offer_codec", "string", "sdp_media_offer_codec", "string"), ("sdp_media_answer_codec", "string", "sdp_media_answer_codec", "string"), ("video_cac", "string", "video_cac", "string"), ("vmg_name", "string", "vmg_name", "string"), ("msrp_data_volume_rx_src", "long", "msrp_data_volume_rx_src", "long"), ("msrp_data_volume_rx_dst", "long", "msrp_data_volume_rx_dst", "long"), ("msrp_im_rx_src", "long", "msrp_im_rx_src", "long"), ("msrp_im_rx_dst", "long", "msrp_im_rx_dst", "long"), ("msrp_file_size", "long", "msrp_file_size", "long"), ("siprec_profile", "string", "siprec_profile", "string"), ("siprec_associated_callids", "string", "siprec_associated_callids", "string"), ("rs_setup_error", "string", "rs_setup_error", "string"),("clean_number", "string", "clean_number", "string"),("calling_number", "string", "calling_number", "string"),("called_number", "string", "called_number", "string"),("partition_key", "string", "partition_key", "string")], transformation_ctx = "applymapping1")

resolvechoice2 = ResolveChoice.apply(frame = applymapping1, choice = "make_struct", transformation_ctx = "resolvechoice2")

dropnullfields3 = DropNullFields.apply(frame = resolvechoice2, transformation_ctx = "dropnullfields3")
dropnullfields3.printSchema()
datasink4 = glueContext.write_dynamic_frame.from_options(frame = dropnullfields3, connection_type = "s3", connection_options = {"path": "s3://pk-cdr-test/parquet", "partitionKeys": ["partition_key"]}, format = "parquet", transformation_ctx = "datasink4")

job.commit()
